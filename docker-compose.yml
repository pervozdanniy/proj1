version: "3.9"
services:
  core:
    build:
      context: .
      dockerfile: Dockerfile.local
    volumes:
      - ./apps/core:/usr/src/apps/core
      - ./common:/usr/src/common
    networks:
      - backend
    env_file:
      - .env
    command: "start -w core"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  auth:
    build:
      context: .
      dockerfile: Dockerfile.local
    volumes:
      - ./apps/auth:/usr/src/apps/auth
      - ./common:/usr/src/common
    networks:
      - backend
    env_file:
      - .env
    command: "start -w auth"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  bc-listener:
    build:
      context: .
      dockerfile: Dockerfile.local
    volumes:
      - ./apps/bc-listener:/usr/src/apps/bc-listener
    networks:
      - backend
    env_file:
      - .env
    command: "start -w bc-listener"

  notifier:
    build:
      context: .
      dockerfile: Dockerfile.local
    volumes:
      - ./apps/notifier:/usr/src/apps/notifier
      - ./common:/usr/src/common
    networks:
      - backend
    env_file:
      - .env
    command: "start -w notifier"

  websocket:
    build:
      context: .
      dockerfile: Dockerfile.local
    volumes:
      - ./apps/websocket:/usr/src/apps/websocket
      - ./common:/usr/src/common
    networks:
      - backend
    env_file:
      - .env
    command: "start -w websocket"
    ports:
      - ${WEBSOCKET_LOCAL_PORT}:3000
    depends_on:
      redis:
        condition: service_healthy

  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.local
    volumes:
      - ./apps/api-gateway:/usr/src/apps/api-gateway
      - ./common:/usr/src/common
    networks:
      - backend
    env_file:
      - .env
    command: "start -w api-gateway"
    ports:
      - ${API_LOCAL_PORT}:3000
    depends_on:
      redis:
        condition: service_healthy

  sdk-gateway:
    build:
      context: .
      dockerfile: Dockerfile.local
    volumes:
      - ./apps/sdk-gateway:/usr/src/apps/sdk-gateway
      - ./common:/usr/src/common
    networks:
      - backend
    env_file:
      - .env
    command: "start -w sdk-gateway"
    ports:
      - ${SDK_LOCAL_PORT}:3000
    depends_on:
      redis:
        condition: service_healthy

  admin-panel:
    build:
      context: .
      dockerfile: Dockerfile.local
    volumes:
      - ./apps/admin-panel:/usr/src/apps/admin-panel
      - ./common:/usr/src/common
    networks:
      - backend
    env_file:
      - .env
    command: "start -w admin-panel"
    ports:
      - ${ADMIN_PANEL_LOCAL_PORT}:3002
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  redis:
    image: "redis:alpine"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
    networks:
      - backend
    ports:
      - ${REDIS_PORT}:6379

  postgres:
    image: "postgres:alpine"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_CORE_DB},${POSTGRES_AUTH_DB},${POSTGRES_ADMIN_PANEL_DB}
    volumes:
      - ./docker-postgresql-multiple-databases.sh:/docker-entrypoint-initdb.d/docker-postgresql-multiple-databases.sh
      - pg-data:/var/lib/postgresql/data
    healthcheck:
      test:
        ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "--dbname=${POSTGRES_DB}"]
    networks:
      - backend
    ports:
      - ${DB_LOCAL_PORT}:5432

  minio:
    image: 'minio/minio:latest'
    ports:
      - '${MINIO_LOCAL_PORT:-9000}:9000'
      - '${MINIO_CONSOLE_LOCAL_PORT:-9090}:9090'
    environment:
      MINIO_ROOT_USER: '${AWS_ACCESS_KEY_ID:-root}'
      MINIO_ROOT_PASSWORD: '${AWS_SECRET_ACCESS_KEY:-password}'
    volumes:
      - 'minio:/data/minio'
    command: minio server /data/minio --console-address ":9090"
    networks:
      - backend

networks:
  backend:

volumes:
  pg-data:
  redis-data:
  minio:
    driver: local
