version: "3.9"
services:
  core:
    build: .
    volumes:
      - ./apps/core:/usr/src/apps/core
    networks:
      - backend
    env_file:
      - .env
    command: "start core"
    depends_on:
      postgres:
        condition: service_healthy

  auth:
    build: .
    volumes:
      - ./apps/auth:/usr/src/apps/auth
    networks:
      - backend
    env_file:
      - .env    
    command: "start auth"
    depends_on:
      postgres:
        condition: service_healthy

  bc-listener:
    build: .
    volumes:
      - ./apps/bc-listener:/usr/src/apps/bc-listener
    networks:
      - backend
    env_file:
      - .env
    command: "start bc-listener"

  notifier:
    build: .
    volumes:
      - ./apps/notifier:/usr/src/apps/notifier
    networks:
      - backend
    env_file:
      - .env
    command: "start notifier"

  api-gateway:
    build: .
    volumes:
      - ./apps/api-gateway:/usr/src/apps/api-gateway
    networks:
      - backend
    env_file:
      - .env   
    command: "start api-gateway"

  redis:
    image: "redis:alpine"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
    networks:
      - backend

  postgres:
    image: "postgres:alpine"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pg-data:/var/lib/postgresql/data
    healthcheck:
      test:
        ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "--dbname=${POSTGRES_DB}"]
    networks:
      - backend

networks:
  backend:

volumes:
  pg-data:
  redis-data: