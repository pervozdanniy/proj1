syntax = "proto3";

package skopa.auth;

import "common.proto";

service AuthService {
  rpc Login (AuthRequest) returns (AuthData);

  rpc LoginSocials (SocialsAuthRequest) returns (AuthData);
}

service ClientService {
  rpc Create (ClientCreateRequest) returns (AuthClient);

  rpc Validate(SignedRequest) returns (AuthClient);

  rpc Login(SignedRequest) returns (AuthData);
}

service TwoFactorService {
  rpc List (common.IdRequest) returns (TwoFactorEnabledMethodsResponse);

  rpc Enable (TwoFactorEnableRequest) returns (common.SuccessResponse);

  rpc Disable (TwoFactorDisableRequest) returns (common.SuccessResponse);

  rpc Verify (TwoFactorVerificationRequest) returns (TwoFactorVerificationResponse);
}

message AuthRequest {
  string login = 1;
  string password = 2;
}

message AuthData {
  string access_token = 1;
  string session_id = 2;
}

message ClientCreateRequest {
  string name = 1;
  optional string pub_key = 2;
}

message AuthClient {
  string name = 1;
  string key = 2;
  bool is_secure = 3;
}

message SignedRequest {
  bytes data = 1;
  optional bytes signature = 2;
}

message ClientLoginRequest {
  string login = 1;
  optional string password = 2;
}

message SocialsAuthRequest {
  string username = 1;
  string email = 2;
  string source = 3;
}

message TwoFactorSettings {
  string method = 1;
  optional string destination = 2;
}

message TwoFactorEnableRequest {
  TwoFactorSettings settings = 2;
}

message TwoFactorDisableRequest {
  repeated string methods = 2;
}

message TwoFactorEnabledMethodsResponse {
  repeated string methods = 2;
}

message TwoFactorCode {
  string method = 1;
  uint32 code = 2;
}

message TwoFactorVerificationRequest {
  repeated TwoFactorCode codes = 1;
}

message TwoFactorVerificationResponse {
  bool valid = 1;
  optional string reason = 2;
}