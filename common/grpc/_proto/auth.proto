syntax = "proto3";

package skopa.auth;

import "common.proto";
import "google/protobuf/empty.proto";

service AuthService {
  rpc Login (AuthRequest) returns (AuthData);

  rpc Logout (google.protobuf.Empty) returns (common.SuccessResponse);

  rpc Refresh (TokenRequest) returns (AuthData);

  rpc Validate (TokenRequest) returns (TokenValidateResponse);


  rpc LoginSocials (SocialsAuthRequest) returns (AuthData);

  rpc RegisterSocials (RegisterSocialRequest) returns (AuthData);
  

  rpc CloseAccount (google.protobuf.Empty) returns (common.User);

  rpc OpenAccount (common.IdRequest) returns (common.User);
}

service RegisterService {
  rpc RegisterStart (RegisterStartRequest) returns (AuthData);

  rpc RegisterVerify (TwoFactorCode) returns (TwoFactorVerificationResponse);

  rpc CreateAgreement (CreateAgreementRequest) returns (common.UserAgreement);

  rpc RegisterFinish (RegisterFinishRequest) returns (common.User);

  rpc RegisterSimple (RegisterSimpleRequest) returns (common.User);
}

service ResetPasswordService {
  rpc ResetPasswordStart (ResetPasswordStartRequest) returns (AuthData);

  rpc ResetPasswordVerify (TwoFactorCode) returns (TwoFactorVerificationResponse);

  rpc ResetPasswordFinish (ResetPasswordFinishRequest) returns (common.SuccessResponse);

  rpc ChangePasswordStart (ChangePasswordStartRequest) returns (Verification);

  rpc ChangeOldPassword (ChangeOldPasswordRequest) returns (common.SuccessResponse);
}

service ContactInfoService {
  rpc ChangeContactInfoStart (ChangeContactInfoRequest) returns (Verification);

  rpc ChangeContactInfoVerify (TwoFactorCode) returns (TwoFactorVerificationResponse);
}

service ClientService {
  rpc Create (ClientCreateRequest) returns (AuthClient);

  rpc Validate (SignedRequest) returns (AuthClient);

  rpc Login (SignedRequest) returns (AuthData);

  rpc Register (SignedRequest) returns (common.User);
}

service TwoFactorService {
  rpc List (google.protobuf.Empty) returns (TwoFactorEnabledMethodsResponse);

  rpc Enable (TwoFactorEnableRequest) returns (TwoFactorRequireResponse);

  rpc Disable (TwoFactorDisableRequest) returns (TwoFactorRequireResponse);

  rpc Verify (TwoFactorVerificationRequest) returns (TwoFactorVerificationResponse);

  rpc VerifyOne (TwoFactorCode) returns (TwoFactorVerificationResponse);

  rpc Require (google.protobuf.Empty) returns (TwoFactorRequireResponse);

  rpc Resend (TwoFactorSettings) returns (common.SuccessResponse);
}

message TokenRequest {
  string token = 1;
}

message TokenValidateResponse {
  string session_id = 1;
}

message ChangeOldPasswordRequest {
  string old_password = 1;
  string new_password = 2;
}

message ChangePasswordStartRequest {
  string type = 1;
}

message AuthRequest {
  string login = 1;
  string password = 2;
}

message Verification {
  repeated string methods = 1;
}

message AuthData {
  string access_token = 1;
  string refresh_token = 2;
  optional Verification verify = 3;
}

message ChangeContactInfoRequest {
  oneof contact {
    string phone = 1;
    string email = 2;
  }
}

message ClientCreateRequest {
  string name = 1;
  optional string pub_key = 2;
}

message AuthClient {
  string name = 1;
  string key = 2;
  bool is_secure = 3;
}

message SignedRequest {
  bytes data = 1;
  optional bytes signature = 2;
}

message ClientLoginRequest {
  string login = 1;
  optional string password = 2;
}

message RegisterSocialRequest {
  optional string social_id = 1;
  string email = 2;
  string phone = 3;
  string source = 4;
}


message SocialsAuthRequest {
  optional string social_id = 1;
  optional string email = 2;
  string source = 3;
}

message TwoFactorSettings {
  string method = 1;
}

message TwoFactorEnableRequest {
  TwoFactorSettings settings = 1;
}

message TwoFactorDisableRequest {
  repeated string methods = 1;
}

message TwoFactorEnabledMethodsResponse {
  repeated string methods = 1;
}

message TwoFactorCode {
  string method = 1;
  uint32 code = 2;
}

message TwoFactorVerificationRequest {
  repeated TwoFactorCode codes = 1;
}

message TwoFactorVerificationResponse {
  bool valid = 1;
  optional string reason = 2;
  optional TwoFactorEnabledMethodsResponse unverified = 3;
}

message TwoFactorRequireResponse {
  oneof response {
    TwoFactorEnabledMethodsResponse required = 1;
    string error = 2;
  }
}

message RegisterStartRequest {
  string email = 1;
  string phone = 2;
  oneof pwd_or_source {
    string password = 3;
    string source = 4;
  }
}

message RegisterFinishRequest {
  repeated string contacts = 1;
}

message CreateAgreementRequest {
  string country_code = 1;
  common.UserDetails details = 2;
}

message ResetPasswordStartRequest {
  oneof method {
    string email = 1;
    string phone = 2;
  }
}

message ResetPasswordFinishRequest {
  string password = 1;
}

message RegisterSimpleRequest {
  string email = 1;
  string phone = 2;
  string password = 3;
  string country_code = 4;
  common.UserDetails details = 5;
}