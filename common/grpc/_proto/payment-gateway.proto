syntax = "proto3";

import "common.proto";
import "veriff.proto";
import "google/protobuf/empty.proto";
package skopa.core;

service PaymentGatewayService {

  rpc CreateAgreement (AgreementRequest) returns (common.UserAgreement);

  //link
  rpc LinkSession (UserIdRequest) returns (LinkSessionResponse);
  rpc SaveCustomer (LinkCustomerRequest) returns (common.SuccessResponse);

  //veriff
  rpc GenerateVeriffLink(UserIdRequest) returns (veriff.VeriffSessionResponse);
  rpc VeriffHookHandler(veriff.VeriffHookRequest) returns (common.SuccessResponse);
  rpc VeriffWebhookHandler(veriff.WebhookResponse) returns (common.SuccessResponse);


  rpc GetAvailablePaymentMethods (UserIdRequest) returns (PaymentMethodsResponse);
  rpc GetContact (UserIdRequest) returns (ContactResponse);
  rpc GetBalance (BalanceRequest) returns (BalanceResponse);
  rpc Exchange (ExchangeRequest) returns (ExchangeResponse);
  rpc GetUserAccountStatus (common.IdRequest) returns (AccountStatusResponse);
  rpc TransferToHotWallet(google.protobuf.Empty) returns (common.SuccessResponse);

  rpc GetTransactions (SearchTransactionRequest) returns (TransactionResponse);

  //banks
  rpc GetBanksInfo (UserIdRequest) returns (BanksInfoResponse);
  rpc AddBankAccountParams (BankAccountParams) returns (BankAccountParams);

  //deposit funds
  rpc CreateCreditCardResource (UserIdRequest) returns (CreditCardResourceResponse);
  rpc VerifyCreditCard (VerifyCreditCardRequest) returns (common.SuccessResponse);
  rpc MakeDeposit (MakeDepositRequest) returns (ContributionResponse);

  //transfer funds
  rpc TransferFunds (TransferFundsRequest) returns (TransferFundsResponse);

  //withdrawal
  rpc MakeWithdrawal (TransferMethodRequest) returns (JsonData);

  //webhooks

  rpc PrimeWebhooksHandler (PrimeWebhookRequest)   returns (common.SuccessResponse);
  rpc KoyweWebhooksHandler (KoyweWebhookRequest)   returns (common.SuccessResponse);
  rpc FacilitaWebhooksHandler (FacilitaWebhookRequest)   returns (common.SuccessResponse);
  rpc LiquidoWebhooksHandler (LiquidoWebhookRequest)   returns (common.SuccessResponse);
}

message PrimeWebhookRequest {
  string id = 1;
  string account_id = 2;
  string action = 3;
  ChangesData data = 4;
  string resource_id = 5;
  string resource_type = 6;
}

message ChangesData {
  repeated string changes = 1;
}

service DepositFlowService {
  rpc Start(DepositFlowRequest) returns (DepositFlowResponse);

  rpc PayWithSelectedResource(DepositNextStepRequest) returns (ContributionResponse);
}

message LinkSessionResponse {
   string sessionKey = 1;
}

message LinkCustomerRequest {
  string customerId = 1;
  string sessionId = 2;
}

message DepositFlowRequest {
  uint32 user_id = 1;
  string amount = 2;
  string currency = 3;
  string type = 4;
}
message LinkTransferData {
  string paymentId = 1;
  string paymentStatus = 2;
}

message DepositFlowResponse {
  string action = 1;
  optional uint32 flow_id = 2;
  oneof data {
    DepositSelectBankData banks = 3;
    DepositSelectCardData cards = 4;
    DepositRedirectData redirect = 5;
    LinkTransferData link_transfer = 6;
  };
}


message DepositSelectBankData {
  repeated BankAccountParams list = 1;
}

message DepositSelectCardData {
  repeated CreditCard list = 1;
}

message DepositRedirectData {
  string url = 1;
}

message DepositNextStepRequest {
  uint32 id = 1;
  uint32 user_id = 2;
  oneof data {
    SelectBankRequest bank = 3;
    SelectCardRequest card = 4;
  }
}

message SelectBankRequest {
  uint32 id = 1;
  string transfer_type = 2;
}

message SelectCardRequest {
  uint32 id = 1;
  string cvv = 2;
}

message LiquidoWebhookRequest {
  string transactionId = 1;
}
message FacilitaWebhookRequest {
  string orderId = 1;
}

message AccountStatusResponse {
  string status = 1;
}

message AgreementRequest {
  string email = 1;
  optional string password = 2;
  optional string phone = 3;
  optional string country_code = 4;
  optional string source = 5;
  optional string status = 6;
  optional common.UserDetails details = 7;
}


message KoyweWebhookRequest {
    string eventName = 1;
    string orderId = 2;
    string timeStamp = 3;
    string signature = 4;
}

message BanksInfoResponse{
  repeated BankInfo data = 1;
}

message BankInfo {
    string bankCode = 1;
    string name = 2;
    string institutionName = 3;
    string transferCode = 4;
}

message CreateReferenceRequest {
  uint32 id = 1;
  string amount = 2;
  string currency_type = 3;
  string type = 4;
}


message SearchTransactionRequest {
  uint32 user_id = 1;
  uint32 search_after = 2;
  uint32 limit = 3;
  optional string search_term = 4;
}

message WalletResponse {
  string wallet_address = 1;
  string asset_transfer_method_id = 2;
}

message DepositParamsResponse{
  repeated DepositParam data = 1;
}

message DepositParam {
  uint32 id = 1;
  string transfer_method_id = 2;
  string bank_account_number = 3;
  string routing_number = 4;
  string funds_transfer_type = 5;
  string bank_account_name = 6;
}

message DepositDataResponse {
  uint32 id = 1;
  string uuid = 2;
  string amount = 3;
  string currency_type = 4;
}

message TransactionResponse {
  repeated Transaction transactions = 1;
  bool has_more = 2;
  optional uint32 last_id = 3;
}

message Transaction {
  uint32 id = 1;
  string type = 2;
  string title = 3;
  string name = 4;
  string amount = 5;
  string fee = 6;
  string status = 7;
  string created_at = 8;
}

message TransferResponse {
  string to = 1;
  string from = 2;
  string amount = 3;
  string currency_type = 4;
  string status = 5;
  string created_at = 6;
}

message ContactResponse {
  string uuid = 1;
  string first_name = 2;
  string last_name = 3;
  bool identity_confirmed = 4;
  bool proof_of_address_documents_verified = 5;
  bool identity_documents_verified = 6;
  bool aml_cleared = 7;
  bool cip_cleared = 8;


}

message AssetWithdrawalRequest {
  uint32 id = 1;
  string amount = 2;
  string wallet = 3;
}

message AccountResponse {
  string uuid = 1;
  string name = 2;
  string number = 3;
  string status = 4;
}

message PaymentMethodsResponse {
  repeated string methods = 1;
}


message DepositParamRequest{
  uint32 id = 1;
  uint32 bank_account_id = 2;
  string funds_transfer_type = 3;
}

message DepositResponse{
  string transfer_method_id = 1;
}


message MakeDepositRequest {
  uint32 id = 1;
  string funds_transfer_method_id = 2;
  string amount = 3;
  optional string cvv = 4;
}


message ContributionResponse {
 string contribution_id = 1;
}

message BankAccountParams{
  uint32 id = 1;
  string bank_account_name = 2;
  string bank_account_number = 3;
  optional string routing_number = 4;
  optional string bank_code = 5;
}

message BankAccountsResponse {
  repeated BankAccountParams data = 1;
}

message TransferFundsRequest {
  uint32 sender_id = 1;
  uint32 receiver_id = 2;
  string amount = 3;
  string currency_type = 4;
}

message TransferFundsResponse{
  TransferFunds data = 1;
}

message TransferFunds {
  string amount = 1;
  string currency_type = 2;
  string status = 3;
  string created_at = 4;
}


message CreditCardsResponse{
  repeated CreditCard data = 1;
}

message CreditCard {
  uint32 id = 1;
  string transfer_method_id = 2;
  string credit_card_bin = 3;
  string credit_card_type = 4;
  string credit_card_expiration_date = 5;
  string created_at = 6;
  string updated_at = 7;
  string status = 8;
  string uuid = 9;
}

message VerifyCreditCardRequest {
  string contact_id = 1;
  string transfer_method_id = 2;
  string resource_id = 3;
}

message CreditCardResourceResponse {
  string redirect_url = 1;
}

message Withdrawal {
  uint32 id = 1;
  string transfer_method_id = 2;
  string bank_account_number = 3;
  string routing_number = 4;
  string funds_transfer_type = 5;
  string bank_account_name = 6;
}

message PaymentGateway {
  uint32 id = 1;
  string alias = 2;
  string name = 3;
}


message TransferMethodRequest {
  uint32 id = 1;
  uint32 bank_account_id = 2;
  string funds_transfer_type = 3;
  string amount = 4;
}

message WithdrawalResponse{
   string transfer_method_id = 1;
}

message WithdrawalParams{
  uint32 id = 1;
  uint32 bank_account_id = 2;
  string funds_transfer_type = 3;
}

message BalanceRequest {
  uint32 user_id = 1;
  repeated string currencies = 2;
}

message ExchangeRequest {
  string currency_type = 1;
  repeated string currencies = 2;
}

message Conversion {
  string currency = 1;
  string amount = 2;
  optional string rate = 3;
}

message BalanceResponse {
  string settled = 1;
  string currency_type = 2;
  repeated Conversion conversions = 3;
}
message ExchangeResponse {
  string currency_type = 1;
  repeated Rates conversions = 3;
}

message Rates {
  string currency = 1;
  optional string rate = 2;
}

message JsonData {
  string data = 1;
}


message AccountIdRequest{
  string id = 1;
  optional string resource_id = 2;
}


message UserIdRequest{
  uint32 id = 1;
  optional uint32 resource_id = 2;
}

message PG_Token {
  Token_Data data = 1;
}

message Token_Data {
  string token = 1;
}