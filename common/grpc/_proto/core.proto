syntax = "proto3";
package skopa.core;

import "common.proto";

import public "payment-gateway.proto";
import public "country.proto";
import public "notification.proto";

service UserService {
  rpc GetById (common.IdRequest) returns (common.User);

  rpc FindByLogin (FindByLoginRequest) returns (NullableUser);

  rpc FindBySocialId (FindBySocialIdRequest) returns (NullableUser);

  rpc Create (CreateRequest) returns (common.User);

  rpc Delete (common.IdRequest) returns (common.SuccessResponse);

  rpc Update (UpdateRequest) returns (common.User);

  rpc UpdateContacts (UpdateContactsRequest) returns (common.User);

  rpc CheckIfUnique (CheckIfUniqueRequest) returns (common.SuccessResponse);

  rpc GetContacts (SearchContactRequest) returns (ContactsResponse);

  rpc GetLatestRecepients(RecepientsRequest) returns (RecepientsResponse);
}

message ContactsResponse {
  repeated Contact contacts = 1;
  bool has_more = 2;
  optional uint32 last_id = 3;
}

message Contact {
  uint32 id = 1;
  string email = 2;
  string phone = 3;
  string first_name = 4;
  string last_name = 5;
  optional string avatar = 6;
}

message SearchContactRequest {
  uint32 user_id = 1;
  uint32 search_after = 2;
  uint32 limit = 3;
  optional string search_term = 4;
}

message RecepientsRequest {
  uint32 user_id = 1;
  uint32 limit = 2;
}

message RecepientsResponse {
  repeated Contact recepients = 1;
}

message VerifyRequest {
  uint32 id = 1;
  bool socure_verify = 2;
  string document_uuid = 3;
}

message NullableUser {
  optional common.User user = 1;
}

message UserContacts {
  repeated string new = 1;
  repeated string removed = 2;
}

message UpdateRequest {
  uint32 id = 1;
  optional string email = 2;
  optional string country_code = 3;
  optional string phone = 4;
  optional string password = 5;
  optional string status = 6;
  optional common.UserDetails details = 7;
  optional UserContacts contacts = 8;
}

message CreateRequest {
  string email = 2;
  optional string password = 3;
  optional string phone = 4;
  optional string country_code = 5;
  optional string source = 6;
  optional string status = 7;
  optional common.UserDetails details = 8;
  repeated string contacts = 9;
  optional string social_id = 10;
}

message FindByLoginRequest {
  oneof login {
    string email = 1;
    string phone = 2;
  }
}

message FindBySocialIdRequest {
  string social_id = 1;
}

message UpdateContactsRequest {
  uint32 user_id = 1;
  UserContacts contacts = 2;
}

message CheckIfUniqueRequest {
  string email = 1;
  string phone = 2;
}